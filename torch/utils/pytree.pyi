from typing import Callable, Iterable, List, Optional, Tuple, Type

from optree.typing import Children, CustomTreeNode, MetaData, PyTree, T, U

class PyTreeSpec:
    num_nodes: int
    num_leaves: int
    none_is_leaf: bool
    namespace: str
    def unflatten(self, leaves: Iterable[T]) -> PyTree[T]: ...
    def flatten_up_to(self, full_tree: PyTree[T]) -> List[PyTree[T]]: ...
    def compose(self, inner_treespec: "PyTreeSpec") -> "PyTreeSpec": ...
    def walk(
        self,
        f_node: Callable[[Tuple[U, ...], MetaData], U],  # type: ignore[type-arg]
        f_leaf: Optional[Callable[[T], U]],
        leaves: Iterable[T],
    ) -> U: ...
    def children(self) -> List["PyTreeSpec"]: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __len__(self) -> int: ...

def register_node(
    cls: Type[CustomTreeNode[T]],
    to_iterable: Callable[[CustomTreeNode[T]], Tuple[Children[T], MetaData]],  # type: ignore[type-arg]
    from_iterable: Callable[[MetaData, Children[T]], CustomTreeNode[T]],  # type: ignore[type-arg]
    namespace: str,
) -> None: ...
